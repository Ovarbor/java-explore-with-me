{
  "info": {
    "_postman_id": "4f622f31-328a-4506-95bd-66359cfbe749",
    "name": "Test Explore With Me - feature_location",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23073145"
  },
  "item": [
    {
      "name": "Получение локации по id",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const place = await api.addPlace(rnd.getPlace());\r",
              "        pm.collectionVariables.set(\"response\", place)\r",
              "        pm.collectionVariables.set(\"placeid\", place.id)\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get('response');\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Локация должна содержать поля: id, name, location, radius\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('radius');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(source.id).equal(target.id, 'Идентификатор локации должен соответствовать идентификатору в запросе');\r",
              "    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать названию локации с указанным идентификатором');\r",
              "    pm.expect(source.location.lat).equal(target.location.lat, 'Широта локации должна соответствовать широте локации с указанным идентификатором');\r",
              "    pm.expect(source.location.lon).equal(target.location.lon, 'Долгота локации должно соответствовать долготе локации с указанным идентификатором');\r",
              "    pm.expect(source.radius).equal(target.radius, 'Радиус локации должен соответствовать радиусу локации с указанным идентификатором');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/places/:placeId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "places",
            ":placeId"
          ],
          "variable": [
            {
              "key": "placeId",
              "value": "{{placeid}}",
              "description": "(Required) id локации"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение локаций",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const place = await api.addPlace(rnd.getPlace());\r",
              "        pm.collectionVariables.set(\"response\", place)\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get('response');\r",
              "const target = pm.response.json();\r",
              "let founded;\r",
              "target.forEach(function(element){if (element.id == source.id) founded = element});\r",
              "\r",
              "pm.test(\"локация должна содержать поля: id, name, location, radius\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('location');\r",
              "pm.expect(target[0]).to.have.property('name');\r",
              "pm.expect(target[0]).to.have.property('radius');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(source.id).equal(founded.id, 'Идентификатор локации должен соответствовать идентификатору локации добавленной ранее');\r",
              "    pm.expect(source.name).equal(founded.name, 'Название локации должно соответствовать названию локации добавленной ранее');\r",
              "    pm.expect(source.location.lat).equal(founded.location.lat, 'широта локации должна соответствовать широте локации добавленной ранее');\r",
              "    pm.expect(source.location.lon).equal(founded.location.lon, 'долгота локации должно соответствовать долготе локации добавленной ранее');\r",
              "    pm.expect(source.radius).equal(founded.radius, 'радиус локации должен соответствовать радиусу локации добавленной ранее');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/places?from=0&size=1000",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "places"
          ],
          "query": [
            {
              "key": "from",
              "value": "0",
              "description": "количество локаций, которые нужно пропустить для формирования текущего набора"
            },
            {
              "key": "size",
              "value": "1000",
              "description": "количество локаций в наборе"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление новой локации",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let place;\r",
              "    try {\r",
              "        place = rnd.getPlace();\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(place),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Локация должна содержать поля: id, name, location\", function () {\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "pm.expect(target).to.have.property('radius');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации должна соответствовать широте локации в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
              "    pm.expect(target.radius.toString()).equal(source.radius.toString(), 'радиус локации должен соответствовать радиусу локации в запросе');\r",
              "    pm.expect(source.name).equal(target.name, 'Название локации должно совпадать с отправленным');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/places",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "places"
          ]
        },
        "description": "Обратите внимание: имя локации должно быть уникальным"
      },
      "response": []
    },
    {
      "name": "Получение событий с возможностью фильтрации по локации",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const place = await api.addPlace(rnd.getPlace());\r",
              "        let event = await api.addEvent(user.id, rnd.getEventWithPlace(category.id, place));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.request.removeQueryParams(['text', 'place', 'categories', 'paid']);\r",
              "        pm.request.addQueryParams([`text=` + event.annotation, 'place='+place.id, 'categories=' + category.id, 'paid=' + event.paid]);\r",
              "        pm.collectionVariables.set('response', event);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get('response');\r",
              "const target = pm.response.json()[0];\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('views');\r",
              "pm.expect(target).to.have.property('confirmedRequests');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
              "    pm.expect(source.category.id).equal(target.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
              "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
              "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
              "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events?text=0&place=0&categories=0&paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=LOCATION&from=0&size=1000",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events"
          ],
          "query": [
            {
              "key": "text",
              "value": "0",
              "description": "текст для поиска в содержимом аннотации и подробном описании события"
            },
            {
              "key": "place",
              "value": "0",
              "description": "идентификатор локации для поиска"
            },
            {
              "key": "categories",
              "value": "0",
              "description": "список идентификаторов категорий в которых будет вестись поиск"
            },
            {
              "key": "paid",
              "value": "true",
              "description": "поиск только платных/бесплатных событий"
            },
            {
              "key": "rangeStart",
              "value": "2022-01-06%2013%3A30%3A38",
              "description": "дата и время не раньше которых должно произойти событие"
            },
            {
              "key": "rangeEnd",
              "value": "2097-09-06%2013%3A30%3A38",
              "description": "дата и время не позже которых должно произойти событие"
            },
            {
              "key": "onlyAvailable",
              "value": "false",
              "description": "только события у которых не исчерпан лимит запросов на участие"
            },
            {
              "key": "sort",
              "value": "LOCATION",
              "description": "Вариант сортировки: по дате события или по количеству просмотров"
            },
            {
              "key": "from",
              "value": "0",
              "description": "количество событий, которые нужно пропустить для формирования текущего набора"
            },
            {
              "key": "size",
              "value": "1000",
              "description": "количество событий в наборе"
            }
          ]
        },
        "description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
      },
      "response": []
    }
  ],
"event": [
{
"listen": "prerequest",
"script": {
"type": "text/javascript",
"exec": [
"API = class {",
"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
"        this.baseUrl = baseUrl;",
"        this.pm = postman;",
"        this._verbose = verbose;",
"    }",
"",
"    async addUser(user, verbose=null) {",
"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
"    }",
"",
"    async addPlace(place, verbose=null) {",
"    return this.post(\"/admin/places\", place, \"Ошибка при добавлении новой локации: \", verbose);",
"    }",
"",
"    async addCategory(category, verbose=null) {",
"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
"    }",
"",
"    async addEvent(userId, event, verbose=null) {",
"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
"    }",
"",
"    async addCompilation(compilation, verbose=null) {",
"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
"    }",
"",
"    async publishParticipationRequest(eventId, userId, verbose=null) {",
"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
"    }",
"",
"    async publishEvent(eventId, verbose=null) {",
"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
"    }",
"    ",
"    async rejectEvent(eventId, verbose=null) {",
"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
"    }",
"",
"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
"    }",
"",
"    async findCategory(catId, verbose=null) {",
"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
"    }",
"",
"    async findCompilation(compId, verbose=null) {",
"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
"    }",
"",
"    async findUser(userId, verbose=null) {",
"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
"    }",
"",
"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
"    }",
"",
"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
"    }",
"",
"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
"    }",
"",
"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
"        return new Promise((resolve, reject) => {",
"            verbose = verbose == null ? this._verbose : verbose;",
"",
"            const request = {",
"                url: this.baseUrl + path,",
"                method: method,",
"                body: body == null ? \"\" : JSON.stringify(body),",
"                header: { \"Content-Type\": \"application/json\" },",
"            };",
"",
"            if(verbose) {",
"                console.log(\"Отправляю запрос: \", request);",
"            }",
"",
"            try {",
"                this.pm.sendRequest(request, (error, response) => {",
"                    if(error || (response.code >= 400 && response.code <= 599)) {",
"                        let err = error ? error : JSON.stringify(response.json());",
"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
"",
"                        reject(new Error(errorText + err));",
"                    }",
"",
"                    if(verbose) {",
"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
"                    }",
"",
"                    resolve(response.json());",
"                });",
"            } catch(err) {",
"                if(verbose) {",
"                    console.error(errorText, err);",
"                }",
"                return Promise.reject(err);",
"            }",
"        });",
"    }",
"};",
"",
"RandomUtils = class {",
"    constructor() {}",
"",
"    getUser() {",
"        return {",
"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
"            email: pm.variables.replaceIn('{{$randomEmail}}')",
"        };",
"    }",
"",
"    getCategory() {",
"        return {",
"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
"        };",
"    }",
"",
"    getPlace() {",
"        return {",
"            location: {",
  "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
  "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
"            },",
"                radius: pm.variables.replaceIn('{{$randomInt}}'),",
"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
"        };",
"    }",
"",
"    getEvent(categoryId) {",
"        return {",
"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
"            category: categoryId,",
"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
"            eventDate: this.getFutureDateTime(),",
"            location: {",
"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
"            },",
"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
"        }",
"    }",
"",
"    getEventWithPlace(categoryId, place) {",
"        return {",
"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
"            category: categoryId,",
"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
"            eventDate: this.getFutureDateTime(),",
"            location: {",
  "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
  "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
"            },",
"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
"        }",
"    }",
"",
"    getCompilation(...eventIds) {",
"        return {",
"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
"            events: eventIds",
"        };",
"    }",
"",
"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
"        let moment = require('moment');",
"",
"        let m = moment();",
"        m.add(hourShift, 'hour');",
"        m.add(minuteShift, 'minute');",
"        m.add(yearShift, 'year');",
"",
"        return m.format('YYYY-MM-DD HH:mm:ss');",
"    }",
"}"
]
}
},
{
"listen": "test",
"script": {
"type": "text/javascript",
"exec": [
""
]
}
}
],
"variable": [
{
"key": "baseUrl",
"value": "http://localhost:8080",
"type": "string"
},
{
"key": "name",
"value": ""
},
{
"key": "usersCount",
"value": 1,
"type": "number"
},
{
"key": "catid",
"value": 1,
"type": "number"
},
{
"key": "request_body",
"value": ""
},
{
"key": "mail",
"value": ""
},
{
"key": "response",
"value": ""
},
{
"key": "uid",
"value": 1,
"type": "number"
},
{
"key": "catname",
"value": ""
},
{
"key": "eid",
"value": 1,
"type": "number"
},
{
"key": "compid",
"value": 1,
"type": "number"
},
{
"key": "toCheck",
"value": ""
},
{
"key": "newDataToSet",
"value": ""
},
{
"key": "uid1",
"value": ""
},
{
"key": "reqid",
"value": 1,
"type": "number"
},
{
"key": "catId",
"value": ""
}
]
}